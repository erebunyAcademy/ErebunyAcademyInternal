generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  firstName        String       @db.VarChar(45)
  lastName         String       @db.VarChar(45)
  password         String       @db.VarChar(60)
  isVerified       Boolean      @default(false)
  isAdminVerified  Boolean      @default(false)
  phone            String?      @db.VarChar(60)
  isPhoneVerified  Boolean      @default(false)
  address          String?      @db.VarChar(60)
  country          String?      @db.VarChar(60)
  state            String?      @db.VarChar(60)
  city             String?      @db.VarChar(60)
  confirmationCode Int?         @unique
  attachmentId     String?      @unique @default(uuid())
  attachment       Attachment[]
  role             UserRoleEnum
  teacher          Teacher?
  student          Student?
  admin            Admin?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Teacher {
  id                 String           @id @default(uuid())
  profession         String           @db.VarChar(60)
  workPlace          String           @db.VarChar(60)
  scientificActivity String?          @db.VarChar(60)
  userId             String           @unique
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules          Schedule[]
  subjectTeachers    SubjectTeacher[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Admin {
  id     String        @id @default(uuid())
  userId String        @unique
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   AdminRoleEnum

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Schedule {
  id                String            @id @default(uuid())
  title             String?           @db.VarChar(60)
  description       String?           @db.Text
  academicYear      String?           @db.VarChar(60)
  place             String?           @db.VarChar(60)
  teacherId         Int
  classDurationHour Float
  examType          ExamTypeEnum
  teacher           Teacher[]
  scheduleSubjects  ScheduleSubject[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model ScheduleSubject {
  id         String   @id @default(uuid())
  scheduleId String
  subjectId  String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([scheduleId, subjectId], name: "scheduleSubjectId")
}

model Student {
  id                  String            @id @default(uuid())
  studentGrade        StudentGrade      @relation(fields: [studentGradeId], references: [id])
  studentGradeId      String
  faculty             Faculty           @relation(fields: [facultyId], references: [id])
  facultyId           String
  studentGradeGroup   StudentGradeGroup @relation(fields: [studentGradeGroupId], references: [id])
  studentGradeGroupId String
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String            @unique
  studentExams        StudentExam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Faculty {
  id            String         @id @default(uuid())
  title         String?        @db.VarChar(60)
  description   String?        @db.VarChar(60)
  students      Student[]
  studentGrades StudentGrade[]
  exams         Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model StudentGradeSubject {
  id             String       @id @default(uuid())
  studentGradeId String
  subjectId      String
  studentGrade   StudentGrade @relation(fields: [studentGradeId], references: [id])
  subject        Subject      @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([studentGradeId, subjectId], name: "courseSubjectId")
}

model StudentGrade {
  id                   String                @id @default(uuid())
  title                String?               @db.VarChar(60)
  description          String?               @db.VarChar(60)
  groups               StudentGradeGroup[]
  studentGradeSubjects StudentGradeSubject[]
  faculty              Faculty?              @relation(fields: [facultyId], references: [id])
  facultyId            String?
  students             Student[]
  exams                Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model StudentGradeGroup {
  id             String        @id @default(uuid())
  title          String?       @db.VarChar(60)
  description    String?       @db.VarChar(60)
  studentGradeId String?
  studentGrade   StudentGrade? @relation(fields: [studentGradeId], references: [id])
  students       Student[]
  exams          Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Subject {
  id                   String                @id @default(uuid())
  title                String?               @db.VarChar(60)
  description          String?               @db.VarChar(60)
  studentGradeSubjects StudentGradeSubject[]
  subjectTeacher       SubjectTeacher[]
  attachments          Attachment[]
  scheduleSubject      ScheduleSubject[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model SubjectTeacher {
  id        String  @id @default(uuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([teacherId, subjectId], name: "subjectTeacherId")
}

model Attachment {
  id          String             @id @default(uuid())
  title       String?            @db.Text
  description String?            @db.VarChar(60)
  key         String             @db.Text
  subjectId   String?
  subject     Subject?           @relation(fields: [subjectId], references: [id])
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  mimetype    String             @db.VarChar(60)
  userId      String?
  type        AttachmentTypeEnum

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model StudentExam {
  id        String  @id @default(uuid())
  exam      Exam    @relation(fields: [examId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
  examId    String
  studentId String

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@unique([examId, studentId], name: "studentExamId")
}

model Exam {
  id                  String             @id @default(uuid())
  title               String             @db.VarChar(60)
  description         String?            @db.VarChar(60)
  facultyId           String?
  testQuestions       TestQuestion[]
  studentExams        StudentExam[]
  faculty             Faculty?           @relation(fields: [facultyId], references: [id])
  StudentGradeGroup   StudentGradeGroup? @relation(fields: [studentGradeGroupId], references: [id])
  StudentGrade        StudentGrade?      @relation(fields: [studentGradeId], references: [id])
  studentGradeId      String?
  studentGradeGroupId String?

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)
}

model TestQuestion {
  id          String                @id @default(uuid())
  title       String                @db.VarChar(60)
  description String?               @db.VarChar(60)
  type        TestQuestionTypeEnum
  options     Option[]
  skillLevel  TestQuestionLevelEnum
  exam        Exam?                 @relation(fields: [examId], references: [id])
  examId      String?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Option {
  id             String       @id @default(uuid())
  title          String       @db.VarChar(60)
  isRightAnswer  Boolean      @default(false)
  testquestion   TestQuestion @relation(fields: [testQuestionId], references: [id])
  testQuestionId String

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

enum UserRoleEnum {
  STUDENT
  TEACHER
  ADMIN
}

enum TestQuestionLevelEnum {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExamTypeEnum {
  VERBAL
  TEST
}

enum TestQuestionTypeEnum {
  RADIO
  CHECKBOX
}

enum AttachmentTypeEnum {
  AVATAR
  FILE
}

enum AdminRoleEnum {
  SYS_ADMIN
  RECTORAT
  ACCOUNTANT
  OPERATOR
  HEAD_OF_DEPARTMENT
}
