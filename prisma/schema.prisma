generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  uniqueUserId     Int          @unique
  firstName        String       @db.VarChar(45)
  lastName         String       @db.VarChar(45)
  password         String       @db.VarChar(60)
  isVerified       Boolean      @default(false)
  isAdminVerified  Boolean      @default(false)
  phone            String?      @db.VarChar(60)
  isPhoneVerified  Boolean      @default(false)
  address          String?      @db.VarChar(60)
  country          String?      @db.VarChar(60)
  state            String?      @db.VarChar(60)
  city             String?      @db.VarChar(60)
  confirmationCode Int?         @unique
  attachmentId     String?      @unique @default(uuid())
  attachment       Attachment[]
  role             UserRoleEnum
  teacher          Teacher?
  student          Student?
  admin            Admin?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Teacher {
  id                 String            @id @default(uuid())
  profession         String            @db.VarChar(60)
  workPlace          String            @db.VarChar(60)
  scientificActivity String?           @db.VarChar(60)
  userId             String            @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectTeachers    SubjectTeacher[]
  scheduleTeacher    ScheduleTeacher[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Admin {
  id     String        @id @default(uuid())
  userId String        @unique
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   AdminRoleEnum

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Student {
  id               String             @id @default(uuid())
  courseId         String
  facultyId        String
  courseGroupId    String?
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course             @relation(fields: [courseId], references: [id])
  faculty          Faculty            @relation(fields: [facultyId], references: [id])
  courseGroup      CourseGroup?       @relation(fields: [courseGroupId], references: [id])
  studentExams     StudentExam[]
  attendanceRecord AttendanceRecord[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model AttendanceRecord {
  id                 String           @id @default(uuid())
  student            Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId          String
  academicRegister   AcademicRegister @relation(fields: [academicRegisterId], references: [id], onDelete: Cascade)
  academicRegisterId String
  lessonOfTheDay     String
  mark               Int?
  isAbsent           Boolean          @default(false)
  subject            Subject          @relation(fields: [subjectId], references: [id])
  subjectId          String

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Faculty {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(60)
  description String?   @db.VarChar(60)
  students    Student[]
  courses     Course[]
  exams       Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Course {
  id          String        @id @default(uuid())
  title       String        @db.VarChar(60)
  description String?       @db.VarChar(60)
  groups      CourseGroup[]
  subjects    Subject[]
  faculty     Faculty?      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId   String?
  students    Student[]
  exams       Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model CourseGroup {
  id                 String              @id @default(uuid())
  title              String              @db.VarChar(60)
  description        String?             @db.VarChar(60)
  courseId           String?
  course             Course?             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  students           Student[]
  exams              Exam[]
  schedules          Schedule[]
  nonCyclicSchedules NonCyclicSchedule[]
  academicRegisters  AcademicRegister[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Subject {
  id                 String              @id @default(uuid())
  title              String              @db.VarChar(60)
  description        String?             @db.VarChar(60)
  subjectTeacher     SubjectTeacher[]
  attachments        Attachment[]
  testQuestions      TestQuestion[]
  exam               Exam[]
  schedules          Schedule[]
  course             Course?             @relation(fields: [courseId], references: [id])
  courseId           String?
  nonCyclicSchedules NonCyclicSchedule[]
  attentanceRecords  AttendanceRecord[]
  academicRegisters  AcademicRegister[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Schedule {
  id               String               @id @default(uuid())
  examType         ScheduleExamTypeEnum
  title            String
  description      String?
  totalHours       Float
  startDayDate     DateTime
  endDayDate       DateTime
  isAssessment     Boolean              @default(false)
  examDate         DateTime
  links            String[]
  academicYear     String
  thematicPlan     ThematicPlan[]
  scheduleTeachers ScheduleTeacher[]
  attachment       Attachment[]

  subject       Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId     String
  courseGroup   CourseGroup @relation(fields: [courseGroupId], references: [id])
  courseGroupId String

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model NonCyclicSchedule {
  id            String               @id @default(uuid())
  academicYear  String
  subject       Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId     String
  totalHours    Float
  courseGroupId String
  links         String[]
  title         String
  description   String?
  examType      ScheduleExamTypeEnum

  availableDays    ScheduleTime[]
  thematicPlan     ThematicPlan[]
  scheduleTeachers ScheduleTeacher[]
  attachment       Attachment[]
  courseGroup      CourseGroup       @relation(fields: [courseGroupId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model ScheduleTime {
  id                  String             @id @default(uuid())
  availableDay        WeekDayEnum
  period              String
  nonCyclicSchedule   NonCyclicSchedule? @relation(fields: [nonCyclicScheduleId], references: [id], onDelete: Cascade)
  nonCyclicScheduleId String?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model ScheduleTeacher {
  id                  String             @id @default(uuid())
  teacherId           String
  subjectId           String
  teacher             Teacher            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  schedule            Schedule?          @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId          String?
  nonCyclicSchedule   NonCyclicSchedule? @relation(fields: [nonCyclicScheduleId], references: [id])
  nonCyclicScheduleId String?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model ThematicPlan {
  id                      String                    @id @default(uuid())
  title                   String?
  totalHours              Float
  scheduleId              String?
  schedule                Schedule?                 @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type                    ThematicSubPlanTypeEnum
  thematicPlanDescription ThematicPlanDescription[]
  nonCyclicSchedule       NonCyclicSchedule?        @relation(fields: [nonCyclicScheduleId], references: [id], onDelete: Cascade)
  nonCyclicScheduleId     String?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model ThematicPlanDescription {
  id             String       @id @default(uuid())
  title          String
  hour           String
  thematicPlanId String
  thematicPlan   ThematicPlan @relation(fields: [thematicPlanId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model SubjectTeacher {
  id        String  @id @default(uuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([teacherId, subjectId], name: "subjectTeacherId")
}

model Attachment {
  id                  String             @id @default(uuid())
  title               String?            @db.Text
  description         String?            @db.VarChar(60)
  key                 String             @db.Text
  subjectId           String?
  subject             Subject?           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user                User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  mimetype            String             @db.Text
  userId              String?
  type                AttachmentTypeEnum
  schedule            Schedule?          @relation(fields: [scheduleId], references: [id])
  scheduleId          String?
  nonCyclicSchedule   NonCyclicSchedule? @relation(fields: [nonCyclicScheduleId], references: [id])
  nonCyclicScheduleId String?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model StudentExam {
  id                String                @id @default(uuid())
  exam              Exam                  @relation(fields: [examId], references: [id])
  student           Student               @relation(fields: [studentId], references: [id])
  hasOpened         Boolean               @default(false)
  hasFinished       Boolean               @default(false)
  examId            String
  studentId         String
  studentUuid       String?
  studentOptions    StudentAnswerOption[]
  studentExamResult String?

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@unique([examId, studentId], name: "studentExamId")
}

model StudentAnswerOption {
  id             String       @id @default(uuid())
  studentExam    StudentExam  @relation(fields: [studentExamId], references: [id], onDelete: Cascade)
  studentExamId  String
  options        Option?      @relation(fields: [optionId], references: [id])
  optionId       String?
  testQuestion   TestQuestion @relation(fields: [testQuestionId], references: [id])
  testQuestionId String

  @@unique([optionId, studentExamId, testQuestionId], name: "studentExamOptionId")
}

model Exam {
  id            String            @id @default(uuid())
  studentExams  StudentExam[]
  examLanguages ExamTranslation[]
  subject       Subject?          @relation(fields: [subjectId], references: [id])
  subjectId     String
  faculty       Faculty?          @relation(fields: [facultyId], references: [id])
  facultyId     String?
  course        Course?           @relation(fields: [courseId], references: [id])
  courseId      String?
  courseGroup   CourseGroup?      @relation(fields: [courseGroupId], references: [id])
  courseGroupId String?
  duration      Float
  isArchived    Boolean           @default(false)
  status        ExamStatusEnum    @default(NOT_STARTED)
  examStartTime DateTime?         @db.Timestamp(0)

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)
}

model ExamTranslation {
  id                   String                 @id @default(uuid())
  title                String                 @db.VarChar(60)
  description          String?                @db.Text
  examId               String
  testQuestions        TestQuestion[]
  exam                 Exam                   @relation(fields: [examId], references: [id], onDelete: Cascade)
  examTranslationTests ExamTranslationTests[]
  language             LanguageTypeEnum

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@unique([examId, language], name: "examLanguage")
}

model TestQuestion {
  id                   String                 @id @default(uuid())
  title                String                 @db.Text
  description          String?                @db.Text
  type                 TestQuestionTypeEnum
  options              Option[]
  skillLevel           TestQuestionLevelEnum
  examTranslation      ExamTranslation?       @relation(fields: [examTranslationId], references: [id])
  examTranslationId    String?
  language             LanguageTypeEnum?
  subject              Subject?               @relation(fields: [subjectId], references: [id])
  subjectId            String?
  category             String?
  topic                String?
  subTopic             String?
  orderNumber          Int                    @unique @default(autoincrement())
  examTranslationTests ExamTranslationTests[]
  studentAnswerOption  StudentAnswerOption[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model ExamTranslationTests {
  id                String          @id @default(uuid())
  testQuestion      TestQuestion    @relation(fields: [testQuestionId], references: [id])
  testQuestionId    String
  examTranslation   ExamTranslation @relation(fields: [examTranslationId], references: [id])
  examTranslationId String

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([testQuestionId, examTranslationId], name: "examTranslationTest")
}

model Option {
  id             String                @id @default(uuid())
  title          String                @db.Text
  isRightAnswer  Boolean               @default(false)
  studentOption  StudentAnswerOption[]
  testQuestionId String
  testquestion   TestQuestion          @relation(fields: [testQuestionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model AcademicRegister {
  id                String             @id @default(uuid())
  courseGroup       CourseGroup        @relation(fields: [courseGroupId], references: [id])
  courseGroupId     String
  subject           Subject            @relation(fields: [subjectId], references: [id])
  subjectId         String
  attendanceRecords AttendanceRecord[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([courseGroupId, subjectId], name: "academicRegisterSubjectCourseGroupId")
}

enum UserRoleEnum {
  STUDENT
  TEACHER
  ADMIN
}

enum LanguageTypeEnum {
  AM
  RU
  EN
}

enum ExamStatusEnum {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TestQuestionLevelEnum {
  EASY
  MEDIUM
  HARD
}

enum ExamTypeEnum {
  VERBAL
  TEST
}

enum ScheduleTypeEnum {
  CYCLIC
  NON_CYCLIC
}

enum TestQuestionTypeEnum {
  RADIO
  CHECKBOX
}

enum AttachmentTypeEnum {
  AVATAR
  FILE
}

enum ThematicSubPlanTypeEnum {
  THEORETICAL
  PRACTICAL
}

enum ScheduleExamTypeEnum {
  THEORETICAL
  VERBAL
  ASSESSMENT
}

enum AdminRoleEnum {
  SYS_ADMIN
  RECTORAT
  ACCOUNTANT
  OPERATOR
  HEAD_OF_DEPARTMENT
}

enum WeekDayEnum {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
