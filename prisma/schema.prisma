generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  uniqueUserId     Int          @unique
  firstName        String       @db.VarChar(45)
  lastName         String       @db.VarChar(45)
  password         String       @db.VarChar(60)
  isVerified       Boolean      @default(false)
  isAdminVerified  Boolean      @default(false)
  phone            String?      @db.VarChar(60)
  isPhoneVerified  Boolean      @default(false)
  address          String?      @db.VarChar(60)
  country          String?      @db.VarChar(60)
  state            String?      @db.VarChar(60)
  city             String?      @db.VarChar(60)
  confirmationCode Int?         @unique
  attachmentId     String?      @unique @default(uuid())
  attachment       Attachment[]
  role             UserRoleEnum
  teacher          Teacher?
  student          Student?
  admin            Admin?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Teacher {
  id                 String           @id @default(uuid())
  profession         String           @db.VarChar(60)
  workPlace          String           @db.VarChar(60)
  scientificActivity String?          @db.VarChar(60)
  userId             String           @unique
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectTeachers    SubjectTeacher[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Admin {
  id     String        @id @default(uuid())
  userId String        @unique
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   AdminRoleEnum

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Student {
  id            String        @id @default(uuid())
  course        Course        @relation(fields: [courseId], references: [id])
  courseId      String
  faculty       Faculty       @relation(fields: [facultyId], references: [id])
  facultyId     String
  courseGroup   CourseGroup?  @relation(fields: [courseGroupId], references: [id])
  courseGroupId String?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @unique
  studentExams  StudentExam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Faculty {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(60)
  description String?   @db.VarChar(60)
  students    Student[]
  courses     Course[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  Exam      Exam[]
}

model CourseSubject {
  id        String  @id @default(uuid())
  courseId  String
  subjectId String
  course    Course  @relation(fields: [courseId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([courseId, subjectId], name: "courseSubjectId")
}

model Course {
  id             String          @id @default(uuid())
  title          String          @db.VarChar(60)
  description    String?         @db.VarChar(60)
  groups         CourseGroup[]
  courseSubjects CourseSubject[]
  faculty        Faculty?        @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId      String?
  students       Student[]
  exams          Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model CourseGroup {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(60)
  description String?   @db.VarChar(60)
  courseId    String?
  course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  students    Student[]
  exams       Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Subject {
  id             String           @id @default(uuid())
  title          String           @db.VarChar(60)
  description    String?          @db.VarChar(60)
  courseSubjects CourseSubject[]
  subjectTeacher SubjectTeacher[]
  attachments    Attachment[]
  testQuestions  TestQuestion[]
  exam           Exam[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model SubjectTeacher {
  id        String  @id @default(uuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@unique([teacherId, subjectId], name: "subjectTeacherId")
}

model Attachment {
  id          String             @id @default(uuid())
  title       String?            @db.Text
  description String?            @db.VarChar(60)
  key         String             @db.Text
  subjectId   String?
  subject     Subject?           @relation(fields: [subjectId], references: [id])
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  mimetype    String             @db.VarChar(60)
  userId      String?
  type        AttachmentTypeEnum

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model StudentExam {
  id          String  @id @default(uuid())
  exam        Exam    @relation(fields: [examId], references: [id])
  student     Student @relation(fields: [studentId], references: [id])
  hasOpened   Boolean @default(false)
  examId      String
  studentId   String
  studentUuid String?

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@unique([examId, studentId], name: "studentExamId")
}

model Exam {
  id            String            @id @default(uuid())
  studentExams  StudentExam[]
  examLanguages ExamTranslation[]
  subject       Subject?          @relation(fields: [subjectId], references: [id])
  subjectId     String
  Faculty       Faculty?          @relation(fields: [facultyId], references: [id])
  facultyId     String?
  course        Course?           @relation(fields: [courseId], references: [id])
  courseId      String?
  courseGroup   CourseGroup?      @relation(fields: [courseGroupId], references: [id])
  courseGroupId String?
  duration      Float?
  status        ExamStatusEnum    @default(NOT_STARTED)

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)
}

model ExamTranslation {
  id            String           @id @default(uuid())
  title         String           @db.VarChar(60)
  description   String?          @db.Text
  examId        String
  testQuestions TestQuestion[]
  exam          Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  language      LanguageTypeEnum

  updatedAt DateTime @updatedAt @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@unique([examId, language], name: "examLanguage")
}

model TestQuestion {
  id                String                @id @default(uuid())
  title             String                @db.Text
  description       String?               @db.Text
  type              TestQuestionTypeEnum
  options           Option[]
  skillLevel        TestQuestionLevelEnum
  examTranslation   ExamTranslation?      @relation(fields: [examTranslationId], references: [id])
  examTranslationId String?
  language          LanguageTypeEnum?
  subject           Subject?              @relation(fields: [subjectId], references: [id])
  subjectId         String?
  category          String?
  topic             String?
  subTopic          String?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Option {
  id             String       @id @default(uuid())
  title          String       @db.Text
  isRightAnswer  Boolean      @default(false)
  testquestion   TestQuestion @relation(fields: [testQuestionId], references: [id], onDelete: Cascade)
  testQuestionId String

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

enum UserRoleEnum {
  STUDENT
  TEACHER
  ADMIN
}

enum LanguageTypeEnum {
  AM
  RU
  EN
}

enum ExamStatusEnum {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TestQuestionLevelEnum {
  EASY
  MEDIUM
  HARD
}

enum ExamTypeEnum {
  VERBAL
  TEST
}

enum TestQuestionTypeEnum {
  RADIO
  CHECKBOX
}

enum AttachmentTypeEnum {
  AVATAR
  FILE
}

enum AdminRoleEnum {
  SYS_ADMIN
  RECTORAT
  ACCOUNTANT
  OPERATOR
  HEAD_OF_DEPARTMENT
}
